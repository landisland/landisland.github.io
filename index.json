[{"content":"From Leetcode 856 Score of Parentheses \nProblem Description Given a balanced parentheses string s, return the score of the string. The score of a balanced parentheses string is based on the following rule:\n \u0026quot;()\u0026quot; has score 1. AB has score A + B, where A and B are balanced parentheses strings. (A) has score 2 * A, where A is a balanced parentheses string.\n Solution we use stack to solve this problem:\n If there is a (, we add it to stack because it must match with a ) to get valid value back; If there is a ), we can try to match it with the top value in stack: we can either +1 or *2, here is a tricky way to tackle it: we always choose the greater one : (2 * last) or 1  def scoreOfParentheses(self, s: str) -\u0026gt; int: # Create stack stack = [0] for c in s: if c == \u0026quot;(\u0026quot;: stack.append(0) else: last = stack.pop() stack[-1] += (2 * last) or 1 print(stack) return stack[-1] ","permalink":"/post/leetcodepython-856-score-of-parentheses/","summary":"Leetcode|Python 856 Score of Parentheses","title":"Leetcode|Python 856 Score of Parentheses"},{"content":"it\u0026rsquo;s a test file.\n","permalink":"/tags/","summary":"it\u0026rsquo;s a test file.","title":""},{"content":"Hi there!\n","permalink":"/about/","summary":"About landisland This section details what he does \u0026amp; everything else you might want to know about him.","title":"About Me"}]