[{"content":"What is Data Visualization? So, you probably think data visualization is just some bars and lines, since everyone seems to know how to draw and use matplotlib library in Python.\n![pic1](/img/What I Think Data Visualization Is in 2022/pic1.png)\nIs these data visualization? Yes, but there could be more.\n The greatest value of a picture is when it forces us to notice what we never expected to see.\n\u0026mdash; John Tukey\n Let\u0026rsquo;s see some famous statistical graphics in our history.\nFig.1 Exports and Imports to and from DENMARK \u0026amp; NORWAY from 1700 to 1780 This figure credits to WIKIPEIDA-William Playfair, in this figure it clearly shows the imports and exports data from 1700 to 1780 of England, at a glance we can know which year has a trade surplus and which has a trade deficit. By the way, William Playfair is also the father of pie chart.\nFig.2 How John Snow traced the source of a cholera outbreak in Soho, London in 1854 In 19th Century of London, the city was a nightmare to human due to lack of clean water and sewage system, trash piled up everywhere in the city. On the other hand, it was heaven for epidemic. In Soho, London, 1854, there was an outbreak of cholera. At that time the germ theory of disease had not yet been developed. Most people thought cholera was caused by the foul air. Doctor John Snow was quite skeptical about the \u0026ldquo;pollution air theory\u0026rdquo;, he decided to conduct his own investigation. By talking to local residents, he identified the true reason was in the public water pump even though his chemical and microscope examination of a water sample from the water pump did not conclusively prove its danger. The reason behind this is because the obvious geographical pattern in his figure.\nFig.3 Figure of the causes of mortality in the army in the East by Florence Nightingale. Florence Nightingale was an English social reformer, statistician and the founder of modern nursing. Nightingale is described as \u0026ldquo;a true pioneer in the graphical representation of statistics\u0026rdquo;, and is credited with developing a form of the pie chart now known as the polar area diagram (rose diagram) shown in fig.3.\nIn fig.3, blue color measures deaths from predictable diseases, red color measures deaths from wounds, and black color measures deaths from all other reasons. She successfully persuaded the Government of the United Kingdom to improve medical care and health service for the army, after 10 years of sanitary reform, mortality among the soldiers in India had declined from 69 to 18 per 1,000.\nNowadays, data visualization can be more. Credit to Obsidian\nCredit to 1point3acres\n Data Visualization is the creation and study of the visual representation of data.\n\u0026mdash; WIKIPEDIA\n Three Types of Data Visualization  Information visualization Scientific visualization Visual analytics  Information visualization Information visualization is the study of visual representations of abstract data to reinforce human cognition.\n![Screen Shot 2022-01-14 at 22.51.09](/Users/will/myblog/landisland_blog/static/img/What I Think Data Visualization Is in 2022/Screen Shot 2022-01-14 at 22.51.09.png)\nAbove figure shows how people in a team (designer, editor and data analyst) make an infographic.\n![1280px-Autor](/Users/will/myblog/landisland_blog/static/img/What I Think Data Visualization Is in 2022/1280px-Autor.png)\nCredit to Wikiwand\nScientific visualization Scientific visualization is an interdisciplinary branch of science concerned with the visualization of scientific phenomena. It is also considered a subset of computer graphics, a branch of computer science. The purpose of scientific visualization is to graphically illustrate scientific data to enable scientists to understand, illustrate, and glean insight from their data.\n![Molecular_rendering](/Users/will/myblog/landisland_blog/static/img/What I Think Data Visualization Is in 2022/Molecular_rendering.jpg)\nCredit to Wikiwand\nVisual Analytics Visual analytics is an outgrowth of the fields of information visualization and scientific visualization that focuses on analytical reasoning facilitated by interactive visual interfaces.\nCredit to Washington State Department of Health\nHot Topics And Trends of Data Visualization ![Screen Shot 2022-01-15 at 08.53.07](/Users/will/myblog/landisland_blog/static/img/What I Think Data Visualization Is in 2022/Screen Shot 2022-01-15 at 08.53.07.png)\nFoundations of Data Visualization There are three basic elements of data visualization.\n Process of data visualization Data model Visual coding  Process of Data Visualization Data Model   Categorical data\n Gender: male, female in general Size of clothes: small, medium, large    Ordinal data (is kind of categorical data, but it is ordinal)\n First prize, second prize, and third prize Elementary school, middle school, high school    Numerical data\n With specific number to describe  Categorical data and ordinal data can be attributed to qualitative data, numerical data can be attributed to quantitative data.\nVisual coding ![Screen Shot 2022-01-15 at 09.37.34](/Users/will/myblog/landisland_blog/static/img/What I Think Data Visualization Is in 2022/Screen Shot 2022-01-15 at 09.37.34.png)\n  Reference geekplux.com\n","permalink":"/post/what-i-think-data-visualization-is-in-2022/","summary":"What I think is data visualization,","title":"What I Think Data Visualization Is in 2022"},{"content":"So today when I swiped twitter, I found an interesting tweet which was @yihong0618 made a Python tool can generate a svg heatmap GitHubPoster.\nHere is my 2018-2022 YouTube heatmap\nIn 2017 Fall I became a college student, after that I had more time to explore things that piqued my interests. But I was in China at that time, YouTube was blocked as many other apps did. But I still managed to use YouTube and other apps like Twitter and Google when I was a sophomore student.\n","permalink":"/post/my-youtube-2018-2022-watch-history-in-a-heatmap/","summary":"Heatmap can show a lot","title":"My YouTube 2018-2022 Watch History in A Heatmap Using GitHubPoster"},{"content":"1. Unique Email Addresses From 929. Unique Email Addresses\n1.1 Problem Description Every valid email consists of a local name and a domain name, separated by the '@'sign. Besides lowercase letters, the email may contain one or more '.' or '+'.\n For example, in \u0026quot;alice@leetcode.com\u0026quot;, \u0026quot;alice\u0026quot; is the local name, and \u0026quot;leetcode.com\u0026quot; is the domain name.  If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.\n For example, \u0026quot;alice.z@leetcode.com\u0026quot; and \u0026quot;alicez@leetcode.com\u0026quot; forward to the same email address.  If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.\n For example, \u0026quot;m.y+name@email.com\u0026quot; will be forwarded to \u0026quot;my@email.com\u0026quot;.  It is possible to use both of these rules at the same time.\nGiven an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.\n1.2 Solution We can use split() and replace here:\n split() is to split email address using @ as identifier replace is to use \u0026quot;\u0026quot; to replace .  class Solution: def numUniqueEmails(self, emails: List[str]) -\u0026gt; int: actual = set() for email in emails: local, domain = email.split(\u0026#39;@\u0026#39;) local = local.split(\u0026#39;+\u0026#39;)[0].replace(\u0026#39;.\u0026#39;, \u0026#39;\u0026#39;) actual.add((local, domain)) return len(actual) 2. Day of the Year From 1154. Day of the Year\n2.1 Problem Description Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.\nA leap year:\n can be divided by 4, 400 cannot be divided by 100  2.2 Solution class Solution: def dayOfYear(self, date: str) -\u0026gt; int: # data\u0026#39;s type is string, we want to 1)split it into 3 prats: year, month, day; 2) type from string to int # we can use map() y, m, d = map(int, date.split(\u0026#39;-\u0026#39;)) days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if (y % 400) == 0 or ((y % 4 == 0) and (y % 100 != 0)): days[1] = 29 return d + sum(days[:m-1]) 3. Rotate String From 796. Rotate String\n3.1 Problem Description Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\nA shift on s consists of moving the leftmost character of s to the rightmost position.\n For example, if s = \u0026quot;abcde\u0026quot;, then it will be \u0026quot;bcdea\u0026quot; after one shift.  Example 1:\nInput: s = \u0026#34;abcde\u0026#34;, goal = \u0026#34;cdeab\u0026#34; Output: true Example 2:\nInput: s = \u0026#34;abcde\u0026#34;, goal = \u0026#34;abced\u0026#34; Output: false 3.2 Solution One easy way to solve this problem is we can find out that string goal is also in s + s if goal is rotated from s.\nclass Solution: def rotateString(self, s: str, goal: str) -\u0026gt; bool: return len(s) == len(goal) and goal in s + s 4. Most Common Word From 819. Most Common Word\n4.1 Problem Description Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.\nThe words in paragraph are case-insensitive and the answer should be returned in lowercase.\nExample 1:\nInput: paragraph = \u0026#34;Bob hit a ball, the hit BALL flew far after it was hit.\u0026#34;, banned = [\u0026#34;hit\u0026#34;] Output: \u0026#34;ball\u0026#34; Explanation: \u0026#34;hit\u0026#34; occurs 3 times, but it is a banned word. \u0026#34;ball\u0026#34; occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. Note that words in the paragraph are not case sensitive, that punctuation is ignored (even if adjacent to words, such as \u0026#34;ball,\u0026#34;), and that \u0026#34;hit\u0026#34; isn\u0026#39;t the answer even though it occurs more because it is banned. 4.2 Solution 4 steps:\n remove all punctuations change to lowercase words count for each word not in banned set return the most common word  class Solution: def mostCommonWord(self, paragraph: str, banned: List[str]) -\u0026gt; str: ban = set(banned) # \\w: Matches Unicode word characters, + means Repetition qualifiers words = re.findall(r\u0026#39;\\w+\u0026#39;, paragraph.lower()) print(words) # most_common(n most common elements) return collections.Counter(w for w in words if w not in ban).most_common(1)[0][0] ","permalink":"/post/leetcodepython-some-string-problems/","summary":"Leetcode problems about string","title":"Leetcode|Python Some String Problems"},{"content":"I just finished my 16Personalities Test, and it told me I am one of the protagonists(ENFJs).\n Protagonists (ENFJs) feel called to serve a greater purpose in life. Thoughtful and idealistic, these personality types strive to have a positive impact on other people and the world around them. They rarely shy away from an opportunity to do the right thing, even when doing so is far from easy.\n I cannot say all of these results are correct, but most of them are. And in this post I want to share the connection between my personality type and my career path.\nI can use some keywords to describe my ideal job:\n Tech related field; Can ommunicate to people, people-oriented field in other words; Can help others, a meaning job in other words;  My 16Personalities Test tells what I love most is helping other people:\n When it comes to choosing a career, Protagonists (ENFJs) find fulfillment in doing what they love most – helping other people. And with their creativity and drive, they can find ways to serve and uplift others in nearly any work environment, whether they’re behind a gleaming table in a corporate boardroom or behind the counter at a beloved local coffee shop.\n I guess above is why I want to work in data-related field and now I am actively tring to find an Data Analytics/Data Engineer internship.\n","permalink":"/post/my-16personalities-test-results-is-enfj/","summary":"Summary of My 16Personalities Test Results","title":"My 16Personalities Test Results is ENFJ"},{"content":"1. Convert Binary Number in a Linked List to Integer From 1290. Convert Binary Number in a Linked List to Integer\n1.1 Problem Description Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.\nReturn the decimal value of the number in the linked list.\nExample\nInput: head = [1,0,1] Output: 5 Explanation: (101) in base 2 = (5) in base 10 1.2 Solution  Try to store head value in string format Then use int() method to turn binary to decimal  class Solution: def getDecimalValue(self, head: ListNode) -\u0026gt; int: #create str s to store value s = \u0026#34;\u0026#34; # while loop until linked list ends while head: s += str(head.val) head = head.next return int(s,2) #base is 2, binary to decimal  2. Middle of the Linked List From 876. Middle of the Linked List\n2.1 Problem Description Given the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.\nExample\nInput: head = [1,2,3,4,5] Output: [3,4,5] Explanation: The middle node of the list is node 3. 2.2 Solution A smart way is to use 2 pointers, slow and fast, each time slow goes 1 step while fast goes 2 step, hence when fast hits the end, slow will point to the middle of the linked list.\ndef middleNode(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: # create 2 pointers slow = fast = head # while fast has not hit the end while fast and fast.next: slow = slow.next fast = fast.next.next # slow will point the middle of the linked list return slow 3. \u0026ldquo;Delete\u0026rdquo; Node in a Linked List From 237. Delete Node in a Linked List\n3.1 Problem Description Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.\nIt is guaranteed that the node to be deleted is not a tail node in the list.\nExample\nInput: head = [4,5,1,9], node = 5 Output: [4,1,9] Explanation: You are given the second node with value 5, the linked list should become 4 -\u0026gt; 1 -\u0026gt; 9 after calling your function. 3.2 Solution Actually you can not really delete a node, you just skip this node and point to the next.\nclass Solution: def deleteNode(self, node): \u0026#34;\u0026#34;\u0026#34; :type node: ListNode :rtype: void Do not return anything, modify node in-place instead. \u0026#34;\u0026#34;\u0026#34; node.val = node.next.val node.next = node.next.next 4. Reverse Linked List From 206. Reverse Linked List\n4.1 Problem Description Given the head of a singly linked list, reverse the list, and return the reversed list.\nExample\nInput: head = [1,2,3,4,5] Output: [5,4,3,2,1] 4.2 Solution The idea is to give next value to previous value.\nclass Solution: def reverseList(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: cur, prev = head, None while cur: cur.next, prev, cur = prev, cur, cur.next return prev 5. Palindrome Linked List From 234. Palindrome Linked List\n5.1 Problem Description Given the head of a singly linked list, return true if it is a palindrome.\nExample\nInput: head = [1,2,2,1] Output: true 5.2 Solution We can combine what we learned in 206. Reverse Linked List, first we try to get the reverse first half of linked list using slow and fast pointers, and then compare the value of the first half linked list with the second half of the linked list.\ndef isPalindrome(self, head): fast = slow = head # find the mid node, slow will point to the mid node while fast and fast.next: fast = fast.next.next slow = slow.next # reverse the second half node = None while slow: nxt = slow.next slow.next = node node = slow slow = nxt # compare the first and second half nodes while node: # while node and head: if node.val != head.val: return False node = node.next head = head.next return True 6. Linked List Cycle From 141. Linked List Cycle\n6.1 Problem Description Given head, the head of a linked list, determine if the linked list has a cycle in it.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail\u0026rsquo;s next pointer is connected to. Note that pos is not passed as a parameter.\nReturn true if there is a cycle in the linked list. Otherwise, return false.\nExample\n6.2 Solution The idea is similar to 876. Middle of the Linked List, we can use slow and fast pointers to tackle this problem.\nclass Solution: def hasCycle(self, head: Optional[ListNode]) -\u0026gt; bool: try: slow = head fast = head.next while slow is not fast: slow = slow.next fast = fast.next.next return True except: return False ","permalink":"/post/leetcodepython-linked-list-column/","summary":"Couple of leetcode problems related to linked list","title":"Leetcode|Python Linked List Column"},{"content":"From Leetcode 856 Score of Parentheses \n1. Problem Description Given a balanced parentheses string s, return the score of the string. The score of a balanced parentheses string is based on the following rule:\n  \u0026quot;()\u0026quot; has score 1. AB has score A + B, where A and B are balanced parentheses strings. (A) has score 2 * A, where A is a balanced parentheses string.   1.1 Solution we use stack to solve this problem:\n If there is a (, we add it to stack because it must match with a ) to get valid value back; If there is a ), we can try to match it with the top value in stack: we can either +1 or *2, here is a tricky way to tackle it: we always choose the greater one : (2 * last) or 1  def scoreOfParentheses(self, s: str) -\u0026gt; int: # Create stack stack = [0] for c in s: if c == \u0026quot;(\u0026quot;: stack.append(0) else: last = stack.pop() stack[-1] += (2 * last) or 1 print(stack) return stack[-1] ","permalink":"/post/leetcodepython-856-score-of-parentheses/","summary":"Use stack to tackle this type of matching problem","title":"Leetcode|Python 856 Score of Parentheses"},{"content":"it\u0026rsquo;s a test file.\n","permalink":"/tags/","summary":"it\u0026rsquo;s a test file.","title":""},{"content":"About Me Who I am Howdy! I am a postgrad at the Texas A\u0026amp;M University in Department of Industrial \u0026amp; Systems Engineering, Data Science track. I\u0026rsquo;ve previously lived in Beijing where I got my bachelor\u0026rsquo;s degree.\nI enjoy all the covenience and sparks brought by the digital world, and I’m always in search of methods to improve productivity. \u0026ldquo;Knowledge increases by spreading\u0026rdquo; sways my life so deeply, this saying pushes me to become a newsletter writer, a SSPAI writer, a Bilibili UP (kind of like youtuber in China) with 56K subscribers and 3.24 million views. I am still new, I still have a lot need to learn, I still have a long way to go, but I firmly believe all these learning snippets will rack up to a big amount someday.\nPersonalities  16Personalities: Protagonist Personality, ENFJ (Outgoing/Encouraging/Organized/People Person).  ","permalink":"/about/","summary":"About landisland This section details what he does \u0026amp; everything else you might want to know about him.","title":"About Me"}]