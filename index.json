[{"content":"Convert Binary Number in a Linked List to Integer From 1290. Convert Binary Number in a Linked List to Integer\nProblem Description Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.\nReturn the decimal value of the number in the linked list.\nExample\nInput: head = [1,0,1] Output: 5 Explanation: (101) in base 2 = (5) in base 10 Solution  Try to store head value in string format Then use int() method to turn binary to decimal  class Solution: def getDecimalValue(self, head: ListNode) -\u0026gt; int: #create str s to store value s = \u0026#34;\u0026#34; # while loop until linked list ends while head: s += str(head.val) head = head.next return int(s,2) #base is 2, binary to decimal  Middle of the Linked List From 876. Middle of the Linked List\nProblem Description Given the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.\nExample\nInput: head = [1,2,3,4,5] Output: [3,4,5] Explanation: The middle node of the list is node 3. Solution A smart way is to use 2 pointers, slow and fast, each time slow goes 1 step while fast goes 2 step, hence when fast hits the end, slow will point to the middle of the linked list.\ndef middleNode(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: # create 2 pointers slow = fast = head # while fast has not hit the end while fast and fast.next: slow = slow.next fast = fast.next.next # slow will point the middle of the linked list return slow \u0026ldquo;Delete\u0026rdquo; Node in a Linked List From 237. Delete Node in a Linked List\nProblem Description Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.\nIt is guaranteed that the node to be deleted is not a tail node in the list.\nExample\nInput: head = [4,5,1,9], node = 5 Output: [4,1,9] Explanation: You are given the second node with value 5, the linked list should become 4 -\u0026gt; 1 -\u0026gt; 9 after calling your function. Solution Actually you can not really delete a node, you just skip this node and point to the next.\nclass Solution: def deleteNode(self, node): \u0026#34;\u0026#34;\u0026#34; :type node: ListNode :rtype: void Do not return anything, modify node in-place instead. \u0026#34;\u0026#34;\u0026#34; node.val = node.next.val node.next = node.next.next Reverse Linked List From 206. Reverse Linked List\nProblem Description Given the head of a singly linked list, reverse the list, and return the reversed list.\nExample\nInput: head = [1,2,3,4,5] Output: [5,4,3,2,1] Solution The idea is to give next value to previous value.\nclass Solution: def reverseList(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: cur, prev = head, None while cur: cur.next, prev, cur = prev, cur, cur.next return prev Palindrome Linked List From 234. Palindrome Linked List\nProblem Description Given the head of a singly linked list, return true if it is a palindrome.\nExample\nInput: head = [1,2,2,1] Output: true Solution We can combine what we learned in 206. Reverse Linked List, first we try to get the reverse first half of linked list using slow and fast pointers, and then compare the value of the first half linked list with the second half of the linked list.\ndef isPalindrome(self, head): fast = slow = head # find the mid node, slow will point to the mid node while fast and fast.next: fast = fast.next.next slow = slow.next # reverse the second half node = None while slow: nxt = slow.next slow.next = node node = slow slow = nxt # compare the first and second half nodes while node: # while node and head: if node.val != head.val: return False node = node.next head = head.next return True Linked List Cycle From 141. Linked List Cycle\nProblem Description Given head, the head of a linked list, determine if the linked list has a cycle in it.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail\u0026rsquo;s next pointer is connected to. Note that pos is not passed as a parameter.\nReturn true if there is a cycle in the linked list. Otherwise, return false.\nExample\nSolution The idea is similar to 876. Middle of the Linked List, we can use slow and fast pointers to tackle this problem.\nclass Solution: def hasCycle(self, head: Optional[ListNode]) -\u0026gt; bool: try: slow = head fast = head.next while slow is not fast: slow = slow.next fast = fast.next.next return True except: return False ","permalink":"/post/leetcodepython-linked-list-column/","summary":"Couple of leetcode problems related to linked list","title":"Leetcode|Python Linked List Column"},{"content":"From Leetcode 856 Score of Parentheses \nProblem Description Given a balanced parentheses string s, return the score of the string. The score of a balanced parentheses string is based on the following rule:\n  \u0026quot;()\u0026quot; has score 1. AB has score A + B, where A and B are balanced parentheses strings. (A) has score 2 * A, where A is a balanced parentheses string.   Solution we use stack to solve this problem:\n If there is a (, we add it to stack because it must match with a ) to get valid value back; If there is a ), we can try to match it with the top value in stack: we can either +1 or *2, here is a tricky way to tackle it: we always choose the greater one : (2 * last) or 1  def scoreOfParentheses(self, s: str) -\u0026gt; int: # Create stack stack = [0] for c in s: if c == \u0026quot;(\u0026quot;: stack.append(0) else: last = stack.pop() stack[-1] += (2 * last) or 1 print(stack) return stack[-1] ","permalink":"/post/leetcodepython-856-score-of-parentheses/","summary":"Use stack to tackle this type of matching problem","title":"Leetcode|Python 856 Score of Parentheses"},{"content":"it\u0026rsquo;s a test file.\n","permalink":"/tags/","summary":"it\u0026rsquo;s a test file.","title":""},{"content":"Hi there!\n","permalink":"/about/","summary":"About landisland This section details what he does \u0026amp; everything else you might want to know about him.","title":"About Me"}]